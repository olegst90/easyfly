#include <stdio.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <errno.h>
#include "string.h"
#include "aeproto.h"

int main(int argc, char **argv)
{
    if (argc != 3) {
        fprintf(stderr, "Usage: %s ip port\n", argv[0]);
        return -1;
    }

    int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (sock == -1) {
        fprintf(stderr, "Could not create socket: %s\n", strerror(errno));
        return -1;
    }

    struct sockaddr_in si_local, si_remote;
    memset((char *) &si_local, 0, sizeof(si_local));
    si_local.sin_family = AF_INET;
    si_local.sin_port = 45123;
    si_local.sin_addr.s_addr = htonl(INADDR_ANY);

    int res = bind(sock, (struct sockaddr*)&si_local, sizeof(si_local));
    if (res == -1) {
        fprintf(stderr, "Could not bind socket: %s\n", strerror(errno));
        goto exit;
    }

    printf("Connecting to %s:%s\n", argv[1], argv[2]);

    memset((char *) &si_remote, 0, sizeof(si_remote));
    si_remote.sin_family = AF_INET;
    si_remote.sin_port = htons(atoi(argv[2]));
    inet_pton(AF_INET, argv[1], &(si_remote.sin_addr));

    uint8_t buffer[4096*4];
    req_pkg *pkg = (req_pkg *)buffer;
    memset(pkg, 0, sizeof(pkg));
    pkg->cmd = REQ_ID_GET_STREAM;

    res = sendto(sock, pkg, sizeof(*pkg), 0,
                     (struct sockaddr_in *)&si_remote, sizeof(si_remote));
    if (res == -1) {
        fprintf(stderr, "Could not send to server: %s\n", strerror(errno));
        goto exit;
    }

    printf("Waiting for data...\n");

    int recv_len;
    int repeat_counter = 10; 
    do {
        int si_remote_size = sizeof(si_remote);
        recv_len = recvfrom(sock, buffer, sizeof(buffer), 0,
                           (struct sockaddr *) &si_remote, &si_remote_size);
        if (recv_len == -1) {
            fprintf(stderr, "Could not read header from server: %d / %s\n", recv_len, strerror(errno));
            goto exit;
        }

        //printf("received %d bytes\n", recv_len);
        switch (pkg->cmd) {
        case REQ_ID_STREAM_INFO:
            printf("<stream_info:id %d, %d x %d, %d bytes frame>\n", 
                                                     pkg->payload.stream_info.id,
                                                     pkg->payload.stream_info.width,
                                                     pkg->payload.stream_info.height,
                                                     pkg->payload.stream_info.size);
            break;
        case REQ_ID_STREAM_FRAME:
            if (sizeof(buffer) < sizeof(*pkg) + pkg->payload.frame.fragment_size) {
                fprintf(stderr, "Buffer is too small\n");
                continue;
            }
            printf("<frame:stream %d %d bytes offset %d>\n", pkg->payload.frame.stream_id,
                                                             pkg->payload.frame.fragment_size,
                                                             pkg->payload.frame.offset);
            break;
        }
        if (--repeat_counter <= 0) {
            printf("pinging stream %d\n", pkg->payload.stream_info.id);
            pkg->cmd = REQ_ID_PING_STREAM;
            
            res = sendto(sock, pkg, sizeof(*pkg), 0,
                         (struct sockaddr_in *)&si_remote, sizeof(si_remote));
            if (res == -1) {
                fprintf(stderr, "Could not send to server: %s\n", strerror(errno));
                goto exit;
            }
            repeat_counter = 10;
        }

    } while (1);

exit:
    close(sock);
    return res;
}
